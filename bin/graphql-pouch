#!/usr/bin/env node

const path = require('path');
const fs = require('fs');
const program = require('commander');
const jwt = require('jsonwebtoken');
const manifest = require('../package.json');
const graphqlPouch = require('../server.js');

program
  .version(manifest.version)
  .usage('[options]')
  .option('-r, --remote <url>', 'a CouchDB URL for master-master synchronisation')
  .option('-p, --port <integer>', 'a URL port the server will listen to. defaults to 3000', parseInt)
  .option('-d, --development', 'enables a development mode which enables GraphiQL, nicer errors, and JSON pretty printing')
  .option('-e, --no-relay', 'disables the GraphQL Relay extentions')
  .option('-a, --secret <string>', 'the secret to be used to encrypt tokens. token authentication disabled if this is not set')
  .option('-g, --schema <file>', 'Migrate GraphQL schema file', migrateSchemaFile)
  .option('-s, --static <file>', 'Migrate static content file', migrateStaticFile)
  .option('-l, --function <file>', 'Migrate custom JS function file', migrateFunctionFile)
  .option('-y, --sign <string>', 'the secret to be used to sign and encrypt tokens.', jwtSignSecret)
  .parse(process.argv);

if(program.schema
  || program.static
  || program.function
  || program.sign)
  return console.log('\nOperation successful');

const app = graphqlPouch.init({
              port: program.port || process.env.SERVICE_PORT || 3000,
              couchURL: program.remote || process.env.COUCHDB_URL,
              relay: program.relay || process.env.NO_RELAY,
              continuous_sync: true,
              development: program.development || process.env.DEVELOPMENT || false,
              secret: program.secret || process.env.SECRET
            })
            .start();

function migrateSchemaFile(args){
  const docid = path.parse(args).name;
  const contentFilePath = path.resolve(args);
  const content = fs.readFileSync(contentFilePath).toString();
  const pouchdb = graphqlPouch.init({relay: program.relay, couchURL: program.remote, continuous_sync: false}).default().pouchdb;

  return pouchdb
    .get(docid)
    .catch(error => {
      if(error.message === 'missing') return { _id: docid };
      throw error;
    })
    .then(doc => {
      doc.content = content;
      doc.doctype = 'Schema';
      doc.docid = docid;

      return pouchdb.put(doc);
    })
    .catch(error => console.error(error.message));
}

function migrateStaticFile(args){
  const docid = path.parse(args).name;
  const contentFilePath = path.resolve(args);
  const content = fs.readFileSync(contentFilePath).toString();
  const pouchdb = graphqlPouch.init({relay: program.relay, couchURL: program.remote, continuous_sync: false}).default().pouchdb;

  return pouchdb
    .get(docid)
    .catch(error => {
      if(error.message === 'missing') return { _id: docid };
      throw error;
    })
    .then(doc => {
      doc.content = content;
      doc.doctype = 'Static';
      doc.docid = docid;

      return pouchdb.put(doc);
    })
    .catch(error => console.error(error.message));
}

function migrateFunctionFile(args){
  const docid = path.parse(args).name;
  const contentFilePath = path.resolve(args);
  const content = fs.readFileSync(contentFilePath).toString();
  const pouchdb = graphqlPouch.init({relay: program.relay, couchURL: program.remote, continuous_sync: false}).default().pouchdb;

  return pouchdb
    .get(docid)
    .catch(error => {
      if(error.message === 'missing') return { _id: docid };
      throw error;
    })
    .then(doc => {
      doc.content = content;
      doc.doctype = 'Function';
      doc.docid = docid;

      return pouchdb.put(doc);
    })
    .catch(error => console.error(error.message));
}

function jwtSignSecret(args){
  const authToken = jwt.sign({user: 'admin', role: 'admin'}, args, {audience: 'graphql-pouch'});
  console.log(`JWT token generated. Use the following authorization method:\n`);
  console.log(`------------------- as HTTP Header --------------------`);
  console.log(`Authorization: Bearer ${authToken}`);
  console.log(`\n--------------- or as Query Parameter ---------------`);
  console.log(`?token=${authToken}`);
  console.log(`\nReady to start GraphQL-Server with:`);
  console.log(`graphql-pouch -a ${args}`);
}
